/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ExamplePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ExamplePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("with-html", (source, el, ctx) => {
      let rows = [];
      let src = source.replace(/&nbsp;/g, " ");
      rows = src.split("\n");
      const div = el.createEl("div", { cls: "code_with_html_block" });
      for (let i = 0; i < rows.length; i++) {
        let match = rows[i].match(/<font.*?color="(.*?)">(.*?)<\/font>/);
        if (match) {
          let str1 = rows[i].substring(0, match.index);
          let str2 = match[2];
          let str3 = rows[i].substring(match.index + match[0].length);
          let cont = div.createEl("div", { cls: "code_with_html_line" });
          cont.createEl("span", { text: str1 });
          if (match[1].length != 0) {
            cont.createEl("span", { cls: "code_with_html_line_tag", text: str2 }).style.color = match[1];
          } else {
            cont.createEl("span", { cls: "code_with_html_line_tag", text: str2 });
          }
          cont.createEl("span", { text: str3 });
        } else {
          let innerTxt = rows[i].length == 0 && i != rows.length - 1 ? " " : rows[i];
          div.createEl("div", { cls: "code_with_html_line", text: innerTxt });
        }
      }
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7IE1hcmtkb3duUmVuZGVyQ2hpbGQgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4YW1wbGVQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93bkNvZGVCbG9ja1Byb2Nlc3NvcihcIndpdGgtaHRtbFwiLCAoc291cmNlLCBlbCwgY3R4KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCByb3dzOiBzdHJpbmcgW10gPSBbXTtcclxuICAgICAgICAgICAgLy8gc3BsaXQgbGluZSB3aXRoIFxcblxyXG4gICAgICAgICAgICBsZXQgc3JjID0gc291cmNlLnJlcGxhY2UoLyZuYnNwOy9nLCAnICcpO1xyXG4gICAgICAgICAgICAvLyByb3dzID0gc3JjLnNwbGl0KFwiXFxuXCIpLmZpbHRlcigocm93KSA9PiByb3cubGVuZ3RoID4gMCk7XHJcbiAgICAgICAgICAgIHJvd3MgPSBzcmMuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpdiA9IGVsLmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImNvZGVfd2l0aF9odG1sX2Jsb2NrXCIgfSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy8gZmluZCA8Zm9udCBjb2xvcj1cInh4XCI+IHRhZywgYW5kIGNoYW5nZSB0aGlzIGxpbmUgY29sb3Igd2l0aCBpdCdzIGNvbG9yIGF0dHJcclxuICAgICAgICAgICAgICAgIGxldCBtYXRjaCA9IHJvd3NbaV0ubWF0Y2goLzxmb250Lio/Y29sb3I9XCIoLio/KVwiPiguKj8pPFxcL2ZvbnQ+Lyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RyMSA9IHJvd3NbaV0uc3Vic3RyaW5nKDAsIG1hdGNoLmluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RyMiA9IG1hdGNoWzJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzdHIzID0gcm93c1tpXS5zdWJzdHJpbmcobWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb250ID0gZGl2LmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImNvZGVfd2l0aF9odG1sX2xpbmVcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnQuY3JlYXRlRWwoXCJzcGFuXCIsIHt0ZXh0OiBzdHIxIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFsxXS5sZW5ndGggIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250LmNyZWF0ZUVsKFwic3BhblwiLCB7IGNsczogXCJjb2RlX3dpdGhfaHRtbF9saW5lX3RhZ1wiLCB0ZXh0OiBzdHIyIH0pLnN0eWxlLmNvbG9yID0gbWF0Y2hbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udC5jcmVhdGVFbChcInNwYW5cIiwgeyBjbHM6IFwiY29kZV93aXRoX2h0bWxfbGluZV90YWdcIiwgdGV4dDogc3RyMiB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29udC5jcmVhdGVFbChcInNwYW5cIiwge3RleHQ6IHN0cjMgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbm5lclR4dCA9ICgocm93c1tpXS5sZW5ndGggPT0gMCkgJiYgKGkgIT0gcm93cy5sZW5ndGggLSAxKSkgPyAnICcgOiByb3dzW2ldXHJcbiAgICAgICAgICAgICAgICAgICAgZGl2LmNyZWF0ZUVsKFwiZGl2XCIsIHsgY2xzOiBcImNvZGVfd2l0aF9odG1sX2xpbmVcIiwgdGV4dDogaW5uZXJUeHQgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBdUI7QUFHdkIsSUFBcUIsZ0JBQXJCLGNBQTJDLHVCQUFPO0FBQUEsRUFDOUMsTUFBTSxTQUFTO0FBQ1gsU0FBSyxtQ0FBbUMsYUFBYSxDQUFDLFFBQVEsSUFBSSxRQUFRO0FBQ3RFLFVBQUksT0FBa0IsQ0FBQztBQUV2QixVQUFJLE1BQU0sT0FBTyxRQUFRLFdBQVcsR0FBRztBQUV2QyxhQUFPLElBQUksTUFBTSxJQUFJO0FBQ3JCLFlBQU0sTUFBTSxHQUFHLFNBQVMsT0FBTyxFQUFFLEtBQUssdUJBQXVCLENBQUM7QUFDOUQsZUFBUyxJQUFJLEdBQUcsSUFBSSxLQUFLLFFBQVEsS0FBSztBQUVsQyxZQUFJLFFBQVEsS0FBSyxDQUFDLEVBQUUsTUFBTSxxQ0FBcUM7QUFDL0QsWUFBSSxPQUFPO0FBQ1AsY0FBSSxPQUFPLEtBQUssQ0FBQyxFQUFFLFVBQVUsR0FBRyxNQUFNLEtBQUs7QUFDM0MsY0FBSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixjQUFJLE9BQU8sS0FBSyxDQUFDLEVBQUUsVUFBVSxNQUFNLFFBQVEsTUFBTSxDQUFDLEVBQUUsTUFBTTtBQUMxRCxjQUFJLE9BQU8sSUFBSSxTQUFTLE9BQU8sRUFBRSxLQUFLLHNCQUFxQixDQUFDO0FBQzVELGVBQUssU0FBUyxRQUFRLEVBQUMsTUFBTSxLQUFLLENBQUM7QUFDbkMsY0FBSSxNQUFNLENBQUMsRUFBRSxVQUFVLEdBQUc7QUFDdEIsaUJBQUssU0FBUyxRQUFRLEVBQUUsS0FBSywyQkFBMkIsTUFBTSxLQUFLLENBQUMsRUFBRSxNQUFNLFFBQVEsTUFBTSxDQUFDO0FBQUEsVUFDL0YsT0FBTztBQUNILGlCQUFLLFNBQVMsUUFBUSxFQUFFLEtBQUssMkJBQTJCLE1BQU0sS0FBSyxDQUFDO0FBQUEsVUFDeEU7QUFDQSxlQUFLLFNBQVMsUUFBUSxFQUFDLE1BQU0sS0FBSyxDQUFDO0FBQUEsUUFDdkMsT0FBTztBQUNILGNBQUksV0FBYSxLQUFLLENBQUMsRUFBRSxVQUFVLEtBQU8sS0FBSyxLQUFLLFNBQVMsSUFBTSxNQUFNLEtBQUssQ0FBQztBQUMvRSxjQUFJLFNBQVMsT0FBTyxFQUFFLEtBQUssdUJBQXVCLE1BQU0sU0FBUyxDQUFDO0FBQUEsUUFDdEU7QUFBQSxNQUNKO0FBQUEsSUFDSixDQUFDO0FBQUEsRUFDTDtBQUNKOyIsCiAgIm5hbWVzIjogW10KfQo=
